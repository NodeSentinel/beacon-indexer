generator client {
    provider = "prisma-client-js"
    output   = "../generated/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Validator {
    id                Int     @id @map("id")
    status            Int?    @map("status")
    balance           BigInt  @map("balance")
    effectiveBalance  BigInt? @map("effective_balance")
    withdrawalAddress String? @map("withdrawal_address") @db.VarChar(42)
    users             User[]  @relation("user_to_validator")

    @@index([withdrawalAddress])
    @@index([status])
    @@map("validator")
}

model Epoch {
    epoch                       Int     @id @map("epoch")
    slotsFetched                Boolean @default(false) @map("slots_fetched")
    committeesFetched           Boolean @default(false) @map("committees_fetched")
    syncCommitteesFetched       Boolean @default(false) @map("sync_committees_fetched")
    processed                   Boolean @default(false) @map("processed")
    // processing flags
    validatorsBalancesFetched   Boolean @default(false) @map("validators_balances_fetched")
    validatorsActivationFetched Boolean @default(false) @map("validators_activation_fetched")
    rewardsFetched              Boolean @default(false) @map("rewards_fetched")

    @@map("epoch")
}

model Slot {
    slot                  Int     @id @map("slot")
    processed             Boolean @default(false) @map("processed")
    committeesCountInSlot Json?   @map("committees_count_in_slot") // Stores the number of validators per committee index as an array: [350, 340, ...], required for attestation processing
    proposedBy            Int?    @map("proposed_by") // validator index that proposed the slot

    processingData SlotProcessingData?

    @@index([slot])
    @@index([processed, slot])
    @@map("slot")
}

model SlotProcessingData {
    slot                      Int     @id @map("slot")
    attestationsProcessed     Boolean @default(false) @map("attestations_processed")
    syncRewardsProcessed      Boolean @default(false) @map("sync_rewards_processed")
    blockRewardsProcessed     Boolean @default(false) @map("block_rewards_processed")
    executionRewardsProcessed Boolean @default(false) @map("execution_rewards_processed")
    beaconBlockProcessed      Boolean @default(false) @map("beacon_block_processed")
    withdrawalsRewards        Json?   @map("withdrawals_rewards") // { validator_index: amount }
    clDeposits                Json?   @map("cl_deposits")
    clVoluntaryExits          Json?   @map("cl_voluntary_exits")
    elDeposits                Json?   @map("el_deposits")
    elWithdrawals             Json?   @map("el_withdrawals")
    elConsolidations          Json?   @map("el_consolidations")
    proposerSlashings         Json?   @map("proposer_slashings")
    attesterSlashings         Json?   @map("attester_slashings")

    slotRelation Slot @relation(fields: [slot], references: [slot])

    @@map("slot_processing_data")
}

// Committee is a list of validators that were assigned to a slot.
// TODO: add partition table
model Committee {
    slot                 Int  @map("slot")
    index                Int  @map("index") @db.SmallInt // indicates what position in the epoch this slot is in
    validatorIndex       Int  @map("validator_index")
    aggregationBitsIndex Int  @map("aggregation_bits_index") @db.SmallInt // indicates what position in the aggregation bits this validator was assigned to
    attestationDelay     Int? @map("attestation_delay") @db.SmallInt

    // Optimized for query pattern: slot + index + validatorIndex -> aggregationBitsIndex
    @@id([slot, index, validatorIndex])
    @@map("committee")
}

model SyncCommittee {
    fromEpoch           Int  @map("from_epoch")
    toEpoch             Int  @map("to_epoch")
    validators          Json // Array of validator indices as strings: ["1", "2", "3", ...]
    validatorAggregates Json @map("validator_aggregates") // Array of arrays of validator indices as strings: [["1", "2"], ["3", "4"], ...]

    // TODO: check this index
    @@id([fromEpoch, toEpoch])
    @@map("sync_committee")
}

model ExecutionBlockRewards {
    blockNumber     Int      @id @map("block_number")
    timestamp       DateTime @map("timestamp") @db.Timestamp
    blockReward     BigInt?  @map("block_reward")
    proposerAddress String?  @map("proposer_address") @db.VarChar(42)

    @@map("execution_block_rewards")
}

//-------------------------------------
// Aggregation tables
//-------------------------------------
model HourlyValidatorStats {
    datetime          DateTime @map("datetime") @db.Timestamp // dd-mm-yyyy-hh
    validatorIndex    Int      @map("validator_index")
    attestationsCount Int?     @map("missed_attestations_count") @db.SmallInt
    clRewards         BigInt?  @map("cl_rewards")
    clMissedRewards   BigInt?  @map("cl_missed_rewards")

    @@id([datetime, validatorIndex])
    @@map("hourly_validator_stats")
}

model HourlyValidatorData {
    datetime              DateTime @map("datetime") @db.Timestamp // dd-mm-yyyy-hh
    validatorIndex        Int      @map("validator_index")
    // for all the String field, values always end with a comma
    // this is to improve performance of the database while concatenating values
    // when fetched, be sure to remove the last comma
    slots                 String   @default("") @map("slots") @db.Text // 'slot1,slot2,slot3,...'
    attestations          String   @default("") @map("attestations") @db.Text // 'slot:delay,slot:delay,...'
    syncCommitteeRewards  String   @default("") @map("sync_committee_rewards") @db.Text // 'slot:reward,slot:reward,...'
    proposedBlocksRewards String   @default("") @map("proposed_blocks_rewards") @db.Text // 'slot:reward,slot:reward,...'
    epochRewards          String   @default("") @map("epoch_rewards") @db.Text // 'epoch:head:target:source:inactivity:missedHead:missedTarget:missedSource:missedInactivity,...'

    @@id([datetime, validatorIndex])
    @@map("hourly_validator_data")
}

//-------------------------------------
// API
//-------------------------------------

model User {
    id                           BigInt              @id @map("id")
    loginId                      String              @unique @default(nanoid()) @map("login_id")
    userId                       BigInt              @unique @map("user_id")
    chatId                       BigInt              @unique @map("chat_id")
    username                     String              @unique @map("username")
    messageId                    BigInt?             @map("message_id")
    lastClaimed                  DateTime?           @map("last_claimed")
    hasBlockedBot                Boolean             @default(false) @map("has_blocked_bot")
    createdAt                    DateTime            @default(now()) @map("created_at")
    performanceNotif             DateTime?           @map("performance_notif")
    performanceThreshold         Int                 @default(90) @map("performance_threshold")
    inactiveNotif                DateTime?           @map("inactive_notif")
    inactiveOnMissedAttestations Int                 @default(3) @map("inactive_on_missed_attestations")
    validators                   Validator[]         @relation("user_to_validator")
    withdrawalAddresses          WithdrawalAddress[] @relation("user_to_withdrawal_address")
    feeRewardAddresses           FeeRewardAddress[]  @relation("user_to_fee_reward_address")

    @@map("user")
}

model WithdrawalAddress {
    address String @id @map("address")
    users   User[] @relation("user_to_withdrawal_address")

    @@map("withdrawal_address")
}

model FeeRewardAddress {
    address String  @id @map("address")
    users   User[]  @relation("user_to_fee_reward_address")
    userId  BigInt? @map("user_id")

    @@map("fee_reward_address")
}

//-------------------------------------
// remove
//-------------------------------------

model DailyValidatorStats {
    validatorIndex Int      @map("validator_index")
    date           DateTime @db.Date

    head             BigInt? @map("head")
    target           BigInt? @map("target")
    source           BigInt? @map("source")
    inactivity       BigInt? @map("inactivity")
    syncCommittee    BigInt? @map("sync_committee")
    blockReward      BigInt? @map("block_reward")
    missedHead       BigInt? @map("missed_head")
    missedTarget     BigInt? @map("missed_target")
    missedSource     BigInt? @map("missed_source")
    missedInactivity BigInt? @map("missed_inactivity")

    attestationsMissed Int? @map("attestations_missed")

    @@id([validatorIndex, date])
    @@index([date])
}

model LastSummaryUpdate {
    id                    Int       @id @default(autoincrement()) @map("id")
    hourlyValidatorStats  DateTime? @map("hourly_validator_stats")
    dailyValidatorStats   DateTime? @map("daily_validator_stats") @db.Date
    weeklyValidatorStats  DateTime? @map("weekly_validator_stats")
    monthlyValidatorStats DateTime? @map("monthly_validator_stats")
    yearlyValidatorStats  DateTime? @map("yearly_validator_stats")

    @@map("last_summary_update")
}

model ValidatorsStats {
    validatorId     Int
    validatorStatus Int?
    oneHourMissed   Int?
    lastMissed      Int[] // Array of last missed slots: [1020, 1021, .., 1040]

    dailyCLRewards BigInt?
    dailyELRewards BigInt?

    weeklyCLRewards BigInt?
    weeklyELRewards BigInt?

    monthlyCLRewards BigInt?
    monthlyELRewards BigInt?

    timestamp DateTime

    @@id([validatorId])
}

model HourlyBlockAndSyncRewards {
    validatorIndex Int
    hour           Int // 0-23
    date           DateTime @db.Date // dd-mm-yyyy

    blockReward   BigInt? // Reward for proposing a block
    syncCommittee BigInt? // Rewarded for participating in the sync committee

    @@id([validatorIndex, date, hour])
    @@index([date, hour])
}

model ExecutionRewards {
    address     String
    timestamp   DateTime
    amount      Decimal  @db.Decimal(78, 0)
    blockNumber Int      @id

    @@index([timestamp, address])
}
